name: Release Charts to OCI Registry

on:
  push:
    branches:
      - main
    paths:
      - "charts/**"
  workflow_dispatch:
    inputs:
      chart:
        description: "Chart to test (wg-easy, wireguard, wordpress)"
        required: true
        default: "wg-easy"
        type: choice
        options:
          - wg-easy
          - wireguard
          - wordpress
      force:
        description: "Force push even if version exists"
        required: false
        default: false
        type: boolean

jobs:
  oci-release:
    name: Release to OCI Registry
    permissions:
      contents: read
      packages: write
      id-token: write # Required for cosign keyless signing
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    strategy:
      matrix:
        chart: ${{ github.event_name == 'workflow_dispatch' && fromJson(format('["{0}"]', github.event.inputs.chart)) || fromJson('["wg-easy", "wireguard", "wordpress"]') }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Install Helm
        uses: azure/setup-helm@v3

      - name: Install ORAS (for ArtifactHub metadata)
        run: |
          curl -LO "https://github.com/oras-project/oras/releases/download/v1.2.0/oras_1.2.0_linux_amd64.tar.gz"
          mkdir -p oras-install/
          tar -zxf oras_*.tar.gz -C oras-install/
          sudo mv oras-install/oras /usr/local/bin/
          rm -rf oras_*.tar.gz oras-install/

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.7.0
        with:
          cosign-release: "v2.4.1"

      - name: Generate GitHub App Token (with fallback)
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.SLYBASE_APP_ID }}
          private-key: ${{ secrets.SLYBASE_APP_PRIVATE_KEY }}
          owner: SlyBase
        continue-on-error: true

      - name: Debug authentication and registry access
        run: |
          echo "=== Debug Info ==="
          echo "GitHub Actor: ${{ github.actor }}"
          echo "Event: ${{ github.event_name }}"
          echo "Target registry: ghcr.io/slybase/charts"

          # Prioritize Personal Access Token over GitHub App
          if [ -n "${{ secrets.SLYBASE_GHCR_TOKEN }}" ]; then
            echo "Using Personal Access Token (preferred for package creation)"
            token="${{ secrets.SLYBASE_GHCR_TOKEN }}"
          elif [ -n "${{ steps.app-token.outputs.token }}" ]; then
            echo "Using GitHub App token (may have limitations for new packages)"
            token="${{ steps.app-token.outputs.token }}"
          else
            echo "‚ùå No authentication token available!"
            exit 1
          fi

          echo "=== Test token access ==="
          # Test if the token can access SlyBase org
          if curl -s -f -H "Authorization: Bearer $token" \
               -H "Accept: application/vnd.github.v3+json" \
               https://api.github.com/orgs/SlyBase >/dev/null; then
            echo "‚úÖ Token can access SlyBase org"
          else
            echo "‚ùå Token cannot access SlyBase org"
          fi

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.SLYBASE_GHCR_TOKEN || steps.app-token.outputs.token }}

      - name: Check for chart changes
        id: chart-changes
        run: |
          chart_dir="charts/${{ matrix.chart }}"

          if [ ! -d "$chart_dir" ]; then
            echo "Chart directory $chart_dir does not exist"
            echo "skip=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Get the current chart version
          chart_version=$(helm show chart "$chart_dir" | grep '^version:' | cut -d' ' -f2)
          chart_name="${{ matrix.chart }}"

          echo "chart_version=$chart_version" >> $GITHUB_OUTPUT
          echo "chart_name=$chart_name" >> $GITHUB_OUTPUT

          # Check if this version already exists in the registry
          if helm pull "oci://ghcr.io/slybase/charts/$chart_name" --version "$chart_version" 2>/dev/null; then
            echo "Chart $chart_name:$chart_version already exists in registry"
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "Chart $chart_name:$chart_version does not exist, will publish"
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: Package and push chart to OCI registry
        if: steps.chart-changes.outputs.skip == 'false'
        run: |
          chart_dir="charts/${{ matrix.chart }}"
          chart_name="${{ steps.chart-changes.outputs.chart_name }}"
          chart_version="${{ steps.chart-changes.outputs.chart_version }}"

          echo "Packaging chart $chart_name version $chart_version"

          # Package the chart
          helm package "$chart_dir" --destination ./packages

          echo "Pushing to OCI registry: oci://ghcr.io/slybase/charts"
          echo "Chart file: ./packages/${chart_name}-${chart_version}.tgz"

          # Push to OCI registry and capture the digest
          set -x  # Enable debug output
          push_output=$(helm push "./packages/${chart_name}-${chart_version}.tgz" "oci://ghcr.io/slybase/charts" 2>&1) || {
            echo "Helm push failed with exit code $?"
            echo "Push output:"
            echo "$push_output"
            exit 1
          }
          set +x  # Disable debug output

          echo "Push successful!"
          echo "$push_output"

          # Extract digest from the push output
          digest=$(echo "$push_output" | grep -o 'sha256:[a-f0-9]\{64\}' | head -1)

          if [ -z "$digest" ]; then
            echo "Failed to extract digest from push output"
            echo "Full push output was:"
            echo "$push_output"
            exit 1
          fi

          echo "Chart pushed with digest: $digest"
          echo "chart_digest=$digest" >> $GITHUB_OUTPUT

          # Save chart reference for signing
          chart_ref="ghcr.io/slybase/charts/${chart_name}@${digest}"
          echo "chart_ref=$chart_ref" >> $GITHUB_OUTPUT
        id: push

      - name: Sign chart with Cosign
        if: steps.chart-changes.outputs.skip == 'false' && steps.push.outputs.chart_ref != ''
        run: |
          chart_ref="${{ steps.push.outputs.chart_ref }}"

          echo "Signing chart: $chart_ref"

          # Sign the chart using keyless signing
          cosign sign --yes "$chart_ref"

          echo "Chart signed successfully"

      - name: Verify chart signature
        if: steps.chart-changes.outputs.skip == 'false' && steps.push.outputs.chart_ref != ''
        run: |
          chart_ref="${{ steps.push.outputs.chart_ref }}"

          echo "Verifying signature for: $chart_ref"

          # Verify the signature
          cosign verify "$chart_ref" \
            --certificate-oidc-issuer "https://token.actions.githubusercontent.com" \
            --certificate-identity "https://github.com/${{ github.repository }}/.github/workflows/oci-release.yaml@refs/heads/main"

          echo "Signature verification successful"

      - name: Output chart information
        if: steps.chart-changes.outputs.skip == 'false'
        run: |
          chart_name="${{ steps.chart-changes.outputs.chart_name }}"
          chart_version="${{ steps.chart-changes.outputs.chart_version }}"
          chart_ref="${{ steps.push.outputs.chart_ref }}"

          echo "üì¶ Chart: $chart_name"
          echo "üè∑Ô∏è  Version: $chart_version"
          echo "üìç Reference: $chart_ref"
          echo "‚úÖ Signed and verified with Cosign"
          echo ""
          echo "To use this chart with Helm:"
          echo "helm install my-release oci://ghcr.io/slybase/charts/$chart_name --version $chart_version"
          echo ""
          echo "To verify signature:"
          echo "cosign verify $chart_ref --certificate-oidc-issuer https://token.actions.githubusercontent.com --certificate-identity https://github.com/${{ github.repository }}/.github/workflows/oci-release.yaml@refs/heads/main"

      - name: Upload ArtifactHub metadata for this chart
        if: steps.chart-changes.outputs.skip == 'false'
        run: |
          chart_name="${{ steps.chart-changes.outputs.chart_name }}"

          echo "Uploading ArtifactHub metadata for chart: $chart_name"

          # Check if chart-specific artifacthub-repo.yml exists
          if [ -f "charts/$chart_name/artifacthub-repo.yml" ]; then
            echo "Found chart-specific metadata file: charts/$chart_name/artifacthub-repo.yml"
            metadata_file="charts/$chart_name/artifacthub-repo.yml"
          else
            echo "No chart-specific metadata found, using global metadata"
            metadata_file="artifacthub-repo.yml"
          fi

          echo "Pushing metadata to: ghcr.io/slybase/charts/$chart_name:artifacthub.io"

          oras push \
            "ghcr.io/slybase/charts/$chart_name:artifacthub.io" \
            --config /dev/null:application/vnd.cncf.artifacthub.config.v1+yaml \
            "$metadata_file:application/vnd.cncf.artifacthub.repository-metadata.layer.v1.yaml"

          echo "‚úÖ ArtifactHub metadata uploaded successfully for $chart_name"
