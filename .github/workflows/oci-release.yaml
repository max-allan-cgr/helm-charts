name: Release Charts to OCI Registry

on:
  push:
    branches:
      - main
    paths:
      - "charts/**"
  workflow_dispatch:
    inputs:
      chart:
        description: "Chart to test (wg-easy, wireguard, wordpress)"
        required: true
        default: "wg-easy"
        type: choice
        options:
          - wg-easy
          - wireguard
          - wordpress
      force:
        description: "Force push even if version exists"
        required: false
        default: false
        type: boolean

jobs:
  oci-release:
    name: Release to OCI Registry
    permissions:
      contents: read
      packages: write
      id-token: write # Required for cosign keyless signing
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    strategy:
      matrix:
        chart: ${{ github.event_name == 'workflow_dispatch' && fromJson(format('["{0}"]', github.event.inputs.chart)) || fromJson('["wg-easy", "wireguard", "wordpress"]') }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Install Helm
        uses: azure/setup-helm@v3


      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for chart changes
        id: chart-changes
        run: |
          chart_dir="charts/${{ matrix.chart }}"

          if [ ! -d "$chart_dir" ]; then
            echo "Chart directory $chart_dir does not exist"
            echo "skip=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Get the current chart version
          chart_version=$(helm show chart "$chart_dir" | grep '^version:' | cut -d' ' -f2)
          chart_name="${{ matrix.chart }}"

          echo "chart_version=$chart_version" >> $GITHUB_OUTPUT
          echo "chart_name=$chart_name" >> $GITHUB_OUTPUT

          # Check if this version already exists in the registry
          if helm pull "oci://ghcr.io/max-allan-cgr/helm-charts/$chart_name" --version "$chart_version" 2>/dev/null; then
            echo "Chart $chart_name:$chart_version already exists in registry"
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "Chart $chart_name:$chart_version does not exist, will publish"
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: Package and push chart to OCI registry
        if: steps.chart-changes.outputs.skip == 'false'
        run: |
          chart_dir="charts/${{ matrix.chart }}"
          chart_name="${{ steps.chart-changes.outputs.chart_name }}"
          chart_version="${{ steps.chart-changes.outputs.chart_version }}"

          echo "Packaging chart $chart_name version $chart_version"

          # Package the chart
          helm package "$chart_dir" --destination ./packages

          echo "Pushing to OCI registry: oci://ghcr.io/max-allan-cgr/helm-charts"
          echo "Chart file: ./packages/${chart_name}-${chart_version}.tgz"

          # Push to OCI registry and capture the digest
          set -x  # Enable debug output
          push_output=$(helm push "./packages/${chart_name}-${chart_version}.tgz" "oci://ghcr.io/max-allan-cgr/helm-charts" 2>&1) || {
            echo "Helm push failed with exit code $?"
            echo "Push output:"
            echo "$push_output"
            exit 1
          }
          set +x  # Disable debug output

          echo "Push successful!"
          echo "$push_output"

          # Extract digest from the push output
          digest=$(echo "$push_output" | grep -o 'sha256:[a-f0-9]\{64\}' | head -1)

          if [ -z "$digest" ]; then
            echo "Failed to extract digest from push output"
            echo "Full push output was:"
            echo "$push_output"
            exit 1
          fi

          echo "Chart pushed with digest: $digest"
          echo "chart_digest=$digest" >> $GITHUB_OUTPUT

          # Save chart reference for signing
          chart_ref="ghcr.io/max-allan-cgr/helm-charts/${chart_name}@${digest}"
          echo "chart_ref=$chart_ref" >> $GITHUB_OUTPUT
        id: push


      - name: Output chart information
        if: steps.chart-changes.outputs.skip == 'false'
        run: |
          chart_name="${{ steps.chart-changes.outputs.chart_name }}"
          chart_version="${{ steps.chart-changes.outputs.chart_version }}"
          chart_ref="${{ steps.push.outputs.chart_ref }}"

          echo "📦 Chart: $chart_name"
          echo "🏷️  Version: $chart_version"
          echo "📍 Reference: $chart_ref"
          echo "✅ Signed and verified with Cosign"
          echo ""
          echo "To use this chart with Helm:"
          echo "helm install my-release oci://ghcr.io/max-allan-cgr/helm-charts/$chart_name --version $chart_version"
          echo ""
          echo "To verify signature:"
          echo "cosign verify $chart_ref --certificate-oidc-issuer https://token.actions.githubusercontent.com --certificate-identity https://github.com/${{ github.repository }}/.github/workflows/oci-release.yaml@refs/heads/main"


